// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"encoding/json"
	"sync"

	"github.com/rockset/rockset-go-client/openapi"
	"github.com/rockset/webhook"
)

type FakeRockset struct {
	AddDocumentsRawStub        func(context.Context, string, string, json.RawMessage) ([]openapi.DocumentStatus, error)
	addDocumentsRawMutex       sync.RWMutex
	addDocumentsRawArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 json.RawMessage
	}
	addDocumentsRawReturns struct {
		result1 []openapi.DocumentStatus
		result2 error
	}
	addDocumentsRawReturnsOnCall map[int]struct {
		result1 []openapi.DocumentStatus
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRockset) AddDocumentsRaw(arg1 context.Context, arg2 string, arg3 string, arg4 json.RawMessage) ([]openapi.DocumentStatus, error) {
	fake.addDocumentsRawMutex.Lock()
	ret, specificReturn := fake.addDocumentsRawReturnsOnCall[len(fake.addDocumentsRawArgsForCall)]
	fake.addDocumentsRawArgsForCall = append(fake.addDocumentsRawArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 json.RawMessage
	}{arg1, arg2, arg3, arg4})
	stub := fake.AddDocumentsRawStub
	fakeReturns := fake.addDocumentsRawReturns
	fake.recordInvocation("AddDocumentsRaw", []interface{}{arg1, arg2, arg3, arg4})
	fake.addDocumentsRawMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRockset) AddDocumentsRawCallCount() int {
	fake.addDocumentsRawMutex.RLock()
	defer fake.addDocumentsRawMutex.RUnlock()
	return len(fake.addDocumentsRawArgsForCall)
}

func (fake *FakeRockset) AddDocumentsRawCalls(stub func(context.Context, string, string, json.RawMessage) ([]openapi.DocumentStatus, error)) {
	fake.addDocumentsRawMutex.Lock()
	defer fake.addDocumentsRawMutex.Unlock()
	fake.AddDocumentsRawStub = stub
}

func (fake *FakeRockset) AddDocumentsRawArgsForCall(i int) (context.Context, string, string, json.RawMessage) {
	fake.addDocumentsRawMutex.RLock()
	defer fake.addDocumentsRawMutex.RUnlock()
	argsForCall := fake.addDocumentsRawArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeRockset) AddDocumentsRawReturns(result1 []openapi.DocumentStatus, result2 error) {
	fake.addDocumentsRawMutex.Lock()
	defer fake.addDocumentsRawMutex.Unlock()
	fake.AddDocumentsRawStub = nil
	fake.addDocumentsRawReturns = struct {
		result1 []openapi.DocumentStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeRockset) AddDocumentsRawReturnsOnCall(i int, result1 []openapi.DocumentStatus, result2 error) {
	fake.addDocumentsRawMutex.Lock()
	defer fake.addDocumentsRawMutex.Unlock()
	fake.AddDocumentsRawStub = nil
	if fake.addDocumentsRawReturnsOnCall == nil {
		fake.addDocumentsRawReturnsOnCall = make(map[int]struct {
			result1 []openapi.DocumentStatus
			result2 error
		})
	}
	fake.addDocumentsRawReturnsOnCall[i] = struct {
		result1 []openapi.DocumentStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeRockset) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addDocumentsRawMutex.RLock()
	defer fake.addDocumentsRawMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRockset) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ webhook.Rockset = new(FakeRockset)
